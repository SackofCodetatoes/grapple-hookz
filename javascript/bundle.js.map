{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./javascript/camera.js","webpack:///./javascript/coin.js","webpack:///./javascript/cursor.js","webpack:///./javascript/debug.js","webpack:///./javascript/display.js","webpack:///./javascript/game.js","webpack:///./javascript/game_entity.js","webpack:///./javascript/grapplehook.js","webpack:///./javascript/hook.js","webpack:///./javascript/platform.js","webpack:///./javascript/player.js","webpack:///./javascript/ui_entity.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAA0C;;AAE1C,qBAAqB,uDAAU;AAC/B;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;ACfrB;AAAA;AAA0C;;AAE1C,mBAAmB,uDAAU;AAC7B;AACA;;AAEA;;AAEA;AACe,mEAAI,E;;;;;;;;;;;;ACTnB;AAAA;AAAqC;;AAErC,qBAAqB,qDAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEe,qEAAM,E;;;;;;;;;;;;AChCrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACA;AACJ;AACa;AACL;AACJ;AACJ;;;AAG7B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gDAAI;;AAEtB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,gDAAI;AACzB;AACA;AACA;;AAEA;AACA,qBAAqB,oDAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,uBAAuB,oDAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,uBAAuB,oDAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,uBAAuB,oDAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;AAGA,uBAAuB,oDAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;AAGA;AACA,iBAAiB,uDAAU,iBAAiB,iBAAiB,eAAe;AAC5E;AACA;AACA;;;;;;;AAOA;AACA;AACA,oBAAoB,kDAAM;AAC1B,oBAAoB,kDAAM;AAC1B;AACA;AACA,wBAAwB;;;;AAIxB;AACA;AACA;;;AAGA;;;AAGA;AACA;;AAEe,wEAAS,E;;;;;;;;;;;;ACpJxB;AAAA;AAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gDAAI;AACxB;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;AAEe,sEAAO,E;;;;;;;;;;;;ACzCtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACA;AACJ;AACa;AACL;AACJ;AACJ;AACM;;AAEnC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kDAAM;;;AAG5B;AACA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA;AACA;;;AAGA;AACA,IAAI,yDAAS;;AAEb;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,O;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA,mBAAmB,6BAA6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,mEAAI,E;;;;;;;;;;;;AC5NnB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEe,yEAAU,E;;;;;;;;;;;;AC3GzB;AAAA;AAAkC;;;AAGlC,oBAAoB,mDAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kB;;;;;;;;;;;;ACbA;AAAA;AAAuC;;;AAGvC;AACA,mBAAmB,oDAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,mEAAI,EAAC;;AAEpB;AACA,yB;;;;;;;;;;;;AC5CA;AAAA;AAA2C;;AAE3C,uBAAuB,uDAAW;AAClC;AACA;AACA;;;AAGA;;AAEe,uEAAQ,E;;;;;;;;;;;;ACVvB;AAAA;AAAA;AAA0C;AACb;;AAE7B;AACA;;AAEA,qBAAqB,uDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC,iBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;;AAEA,4DAA4D,qBAAqB;;AAEjF,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iC;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wB;AACT;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;;AAGA;;;AAGe,qEAAM,E;;;;;;;;;;;;AC5OrB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEe,wEAAS,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./javascript/grapplehook.js\");\n","import GameEntity from \"./game_entity.js\";\n\nclass Camera extends GameEntity {\n  constructor(options){\n    super(options);\n  }\n\n\n  draw(){\n    this.context.beginPath();\n    this.context.rect(0, 0, 1280, 720);\n    this.context.stroke();\n  }\n}\n\nexport default Camera;","import GameEntity from \"./game_entity.js\";\n\nclass Coin extends GameEntity{\n  constructor(options){\n    super(options);\n\n  }\n\n}\nexport default Coin;","import UIEntity from \"./ui_entity.js\"\n\nclass Cursor extends UIEntity {\n  constructor(options){\n    super(options);\n    this.defaultColor = 'yellow';\n    this.active = true;\n    this.keybind();\n  }\n\n  keybind(){\n    this.canvas.addEventListener('mousemove', (event) => {\n      this.x = event.clientX - this.canvas.offsetLeft;\n      this.y = event.clientY - this.canvas.offsetTop;\n    })\n  }\n\n  draw(){\n    // unique draw\n    this.context.beginPath();\n    this.context.strokeStyle = 'yellow';\n    this.context.lineWidth = 2.5;\n    this.context.arc(this.x, this.y, 10, 0, 2* Math.PI);\n    this.context.stroke();\n  }\n\n  update(viewPort){\n    this.draw(viewPort)\n  }\n\n}\n\nexport default Cursor;","import Player from \"./player.js\";\nimport Camera from \"./camera.js\";\nimport Hook from \"./hook.js\";\nimport GameEntity from \"./game_entity.js\";\nimport Platform from \"./platform.js\";\nimport Cursor from \"./cursor.js\";\nimport Coin from \"./coin.js\";\n\n\nconst debugSeed = function (game) {\n    // //give each object an id\n\n  let playerConfig = {\n        x: 205,\n        y: 566,\n        xLen: 25,\n        yLen: 30,\n        context: game.context,\n        game: game,\n        platformCollision: game.platformCollision,\n        physicsObj: true,\n        physicsCollision: game.physicsCollision,\n        viewPort: game.viewPort,\n        // addEntity: game.addEntity,  //inteded to add hok atfirst\n        deleteEntity: game.deleteEntity,\n        image: game.spriteSheet,\n      }\n      \n  let hookConfig = {\n    x: playerConfig.x,\n    y: playerConfig.y,\n    xLen: 10,\n    yLen: 10,\n    active: false,\n    context: game.context,\n    game: game,\n    platformCollision: game.platformCollision,\n    viewPort: game.viewPort,\n  }\n  game.hook = new Hook(hookConfig);\n  \n  playerConfig.hook = game.hook;\n  \n  \n  let coinConfig = {\n    x: 600,\n    y: 566,\n    xLen: 40,\n    yLen: 40,\n    context: game.context,\n    color: \"yellow\",\n  };\n\n  let testCoin = new Coin(coinConfig);\n  game.activeEntities['coin1'] = testCoin;\n  game.coins.push(testCoin);\n  // game.coins.push(testCoin);\n\n  //put all these in a seed file and use call/apply \n  let platform = new Platform({\n    x: 0,\n    y: game.canvas.attributes.height.value - 50,\n    xLen: game.canvas.attributes.width.value,\n    yLen: 25,\n    context: game.context\n  })\n  game.platforms.push(platform);\n  // game.entities.push(game.platform);\n  game.activeEntities['platform1'] = platform;\n\n  game.platform2 = new Platform({\n    x: 50,\n    y: 0,\n    xLen: 25,\n    yLen: game.canvas.attributes.height.value,\n    context: game.context\n  })\n  game.platforms.push(game.platform2);\n  // game.entities.push(game.platform2);\n  game.activeEntities['platform2'] = game.platform2;\n\n  game.platform3 = new Platform({\n    x: 0,\n    y: 25,\n    xLen: game.canvas.attributes.width.value,\n    yLen: 25,\n    context: game.context\n  })\n  game.platforms.push(game.platform3);\n  // game.entities.push(game.platform3);\n  game.activeEntities['platform3'] = game.platform3;\n\n  game.platform4 = new Platform({\n    x: game.canvas.attributes.width.value - 50,\n    y: 0,\n    xLen: 25,\n    yLen: game.canvas.attributes.height.value,\n    context: game.context\n  })\n  game.platforms.push(game.platform4);\n  // game.entities.push(game.platform2);\n  game.activeEntities['platform4'] = game.platform4;\n\n\n  game.platform5 = new Platform({\n    x: 400,\n    y: 400,\n    xLen: 40,\n    yLen: 40,\n    context: game.context\n  })\n  game.platforms.push(game.platform5);\n  // game.entities.push(game.platform2);\n  game.activeEntities['platform5'] = game.platform5;\n\n\n  //old physics box\n  game.box = new GameEntity(Object.assign({}, playerConfig, {x: 255, y: 205}));\n  // game.entities.push(game.box);\n  game.activeEntities['box'] = game.box;\n  game.physicsObjs.push(game.box);\n\n\n\n\n\n\n  //add player to game\n  //hook object created below hookConfig\n  game.player = new Player(playerConfig);\n  game.camera = new Camera(playerConfig);\n  game.camera.x = 0;\n  game.camera.y = 0;\n  game.camera.center = {x: game.x + (1280 / 2), y: game.y + (720 / 2)}\n\n\n\n  // game.entities.push(game.player);\n  game.activeEntities['player'] = game.player;\n  game.activeEntities['hook'] = game.hook;\n\n  \n  game.physicsObjs.push(game.player);\n\n\n  game.entities = Object.values(game.activeEntities);\n}\n\nexport default debugSeed;","import Game from \"./game.js\";\n\nclass Display {\n  constructor(){\n    this.canvas = document.getElementById('game-canvas');\n    this.context = this.canvas.getContext('2d');\n    this.spriteSheet;\n    console.log(this.background)\n    this.viewPort = {\n      x: 0,\n      y: 0,\n    }\n\n    let gameConfig = {\n      canvas: this.canvas,\n      context: this.context,\n      viewPort: this.viewPort,\n      spriteSheet: this.spriteSheet,\n    }\n    // this.spriteSheet.onload = this.game = new Game(gameConfig);\n    this.game = new Game(gameConfig);\n    // this.game.initialize();\n\n\n    this.render = this.render.bind(this);\n  }\n\n  render(){\n    //create request animation loop\n    this.context.clearRect(0, 0, 1280, 720);\n    //draw UI (title screen, instructions, game)\n    this.context.drawImage(this.background, 0, 300, 8192, 1020, -this.viewPort.x, -this.viewPort.y, 8192, 1020);\n\n    this.game.update();\n    \n\n    requestAnimationFrame(() => this.render());\n  }\n\n}\n\nexport default Display;","import Player from \"./player.js\";\nimport Camera from \"./camera.js\";\nimport Hook from \"./hook.js\";\nimport GameEntity from \"./game_entity.js\";\nimport Platform from \"./platform.js\";\nimport Cursor from \"./cursor.js\";\nimport Coin from \"./coin.js\";\nimport debugSeed from \"./debug.js\";\n\nconst PLAYER_KEYS = ['a', 'd', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', ' '];\n\n\nclass Game {\n  constructor(options){\n   //preload \n    const spriteSheet = new Image();\n    this.canvas = options.canvas;\n    this.context = options.context;\n    this.viewPort = options.viewPort;\n    spriteSheet.src = \"./images/industrial.v2.png\";\n    this.spriteSheet = spriteSheet;\n    this.keyCodePress = {13: false}\n    this.score = 0;\n    \n    this.gameState = 0;\n    //state 0 = title screen, state 1 = active, possibly each state represents a level?\n    \n    this.platforms = [];\n    this.entities = [];\n    this.coins = [];\n    \n    this.physicsObjs = [];\n    this.staticObjs = [];\n    this.activeEntities = {};\n    \n    this.gravDir = 1;\n\n    this.platformCollision = this.platformCollision.bind(this);\n    this.physicsCollision = this.physicsCollision.bind(this);\n    this.addEntity = this.addEntity.bind(this);\n    this.deleteEntity = this.deleteEntity.bind(this);\n    \n    const canvas = document.getElementById('game-canvas');\n\n    document.addEventListener('keydown', (event) => {\n      if(event.keyCode === 13){\n        this.keyCodePress['enter'] = true;\n      }\n    });\n    //add keybind to change states\n    window.onkeydown = function (event) {\n      console.log('prevent input');\n      //prevent screen from moving\n      // return (!event.keycode == 32);\n    }\n    let cursorConfig = {\n      x: 300,\n      y: 300,\n      xLen: 25,\n      yLen: 25,\n      context: this.context,\n    }\n    this.run = false;\n    this.cursor = new Cursor(cursorConfig);\n    \n\n    //test timer\n    // window.run = false;\n    // this.preview = window.setInterval(function(){\n    //   console.log('hey there')\n    //   window.run = !window.run;\n    // }, 3000)\n\n    // this.entities.push(this.cursor);\n    // this.activeEntities['cursor'] = this.cursor;\n  }\n  \n  \n  initialize(){\n    debugSeed(this);\n\n  }\n\n  \n  addEntity(entity, id) {\n    this.activeEntities[id] = entity;\n    this.entities = Object.values(this.activeEntities);\n  }\n  \n\n  deleteEntity(id) {\n    delete this.activeEntities[id];\n    this.entities = Object.values(this.activeEntities)\n  }\n\n  //main game logic loop\n  update(){\n    //each game step\n    switch(this.gameState){\n      //start screen\n      case 0: \n      this.context.fillStyle = 'white'\n      this.context.font = \"bold 64px Montserrat\";\n      this.context.fillText(\"GrappleHook\", 120, 150);\n      // this.context.fillText(\"GrappleHook\", this.canvas.attributes.width.value / 2 - (30 * 6), this.canvas.attributes.height.value / 2 - 10);\n      this.context.font = \"32px Montserrat\";\n      this.context.fillText(\"Press Enter to Start\", this.canvas.attributes.width.value - 400, this.canvas.attributes.height.value - 50);\n      // this.context.fillText(\"Press Enter to Start\", this.canvas.attributes.width.value / 2 - (30 * 5), this.canvas.attributes.height.value / 2 + 30);\n      \n      if(this.keyCodePress['enter'] === true){\n        this.gameState = 1;\n        clearInterval(this.preview);\n        this.initialize();\n      }\n\n      // if(window.run){\n      //   this.viewPort.x += 0.2;\n      // }\n      //run preview\n\n\n      let viewMove = 0.5;\n      // console.log(this.viewPort.x)\n      if(this.viewPort.x + viewMove >= 4192){\n        this.viewPort.x = 0;\n      } \n      this.viewPort.x += viewMove;\n      this.cursor.draw();\n      break;\n\n\n      //game logic\n      case 1: \n      this.viewPort.x = this.player.x - (this.canvas.attributes.width.value / 2);\n      this.viewPort.y = this.player.y - (this.canvas.attributes.height.value / 2);\n      \n      this.applyGravity();\n      \n      // this.camera.x = this.player.x - (1280 / 2);\n      // this.camera.y = this.player.y - (720 / 2);\n      \n      for(let i = 0; i < this.entities.length; i++){\n        if(this.entities[i].active) {\n          this.entities[i].update(this.viewPort);\n        }\n      }\n      //coins can either be implemented thorugh the object itself checking reference and updating the game, or do the check from the game object;\n      for(let i = 0; i < this.coins.length; i++){\n        if(this.player.positionMeeting(this.player.x, this.player.y, this.coins[i]) && this.coins[i].active){\n            this.score += 10;\n            this.coins[i].active = false;\n          }\n        }\n        //draw in game UI (score)\n        this.context.fillStyle = 'white'\n        this.context.font = \"bold 32px Montserrat\";\n        this.context.fillText(`Points: ${this.score}`, this.canvas.attributes.width.value - 220, 100);\n        this.cursor.draw();\n        break;\n      }\n    \n  }\n\n\n\n  physicsCollision(x, y, obj){\n    //check collision with physics objs\n    for (let i = 0; i < this.physicsObjs.length; i++) {\n      // obj.positionMeeting(obj.x, obj.y, platforms[i]);\n      if (\n        (\n          (x + obj.xLen > this.physicsObjs[i].x && x < this.physicsObjs[i].x + this.physicsObjs[i].xLen) &&\n          (y + obj.yLen > this.physicsObjs[i].y && y < this.physicsObjs[i].y + this.physicsObjs[i].yLen) && \n          obj != this.physicsObjs[i]\n        )\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  platformCollision(x, y, obj){\n  //check if new position overlaps with any platforms in platforms entitity\n    for (let i = 0; i < this.platforms.length; i++) {\n      // obj.positionMeeting(obj.x, obj.y, platforms[i]);\n      if (\n        (\n          (x + obj.xLen > this.platforms[i].x && x < this.platforms[i].x + this.platforms[i].xLen) &&\n          (y + obj.yLen > this.platforms[i].y && y < this.platforms[i].y + this.platforms[i].yLen)\n          )\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n  applyGravity(){\n    //iterate over list of entities and apply gravity\n    for(let i = 0; i < this.physicsObjs.length; i++){\n      let curObj = this.physicsObjs[i];\n      \n      //normal gravity\n      if(this.gravDir > 0){\n        if(curObj.vspd < 6 && !this.platformCollision(curObj.x, curObj.y + curObj.vspd, curObj)){\n          curObj.vspd += 0.2;\n        }\n      }\n      else {\n        if(curObj.vspd > -6 && !this.platformCollision(curObj.x, curObj.y + curObj.vspd, curObj)) {\n          curObj.vspd -= 0.2;\n        }\n      }\n    }\n  }\n\n}\n\nexport default Game;","class GameEntity {\n  constructor(options){\n    this.x = options.x;\n    this.y = options.y;\n    this.xLen = options.xLen;\n    this.yLen = options.yLen;\n    this.defaultColor = options.color || 'gray'\n    this.context = options.context;\n    this.platformCollision = options.platformCollision;\n    this.physicsCollision = options.physicsCollision;\n    this.active = options.active || true;\n    this.physicsObj = false || options.physicsObj;\n    \n    this.vspd = 0;\n    this.hspd = 0;\n\n\n    this.draw = this.draw.bind(this);\n    this.stepCollisionCheck = this.stepCollisionCheck.bind(this);\n  }\n\n  draw(viewPort){\n    //check if sprite, else draw green\n    this.context.fillStyle = this.defaultColor;\n    this.context.fillRect(this.x - viewPort.x, this.y - viewPort.y, this.xLen, this.yLen);\n  }\n\n  update(viewPort){\n    if(this.physicsObj){\n      this.stepCollisionCheck();\n    }\n    this.draw(viewPort);\n  }\n\n  stepCollisionCheck(){\n    if (!this.platformCollision(this.x + this.hspd, this.y, this) ) {\n      this.x += this.hspd;\n    } else {\n      let sign = 1;\n      this.hspd < 0 ? sign = -1 : sign = sign;\n      while (!this.platformCollision(this.x + sign, this.y, this) ) {\n        if(this.state === 1){\n          this.ropeAngleVelocity = 0;\n        }\n        this.x += sign;\n      }\n    }\n\n    this.hspd = 0;\n\n    if (!this.platformCollision(this.x, this.y + this.vspd, this)) {\n      this.y += this.vspd;\n    } else {\n      let sign = 1;\n      this.vspd < 0 ? sign = -1 : sign = sign;\n      while (!this.platformCollision(this.x, this.y + sign, this)) {\n        if (this.state === 1) {\n          this.ropeAngleVelocity = 0;\n        }\n        this.y += sign;\n      }\n\n\n      this.vspd = 0;\n    }\n  }\n\n  stepPhysicsCollisionCheck(){\n    if (!this.physicsCollision(this.x + this.hspd, this.y, this)) {\n      this.x += this.hspd;\n    } else {\n      let sign = 1;\n      this.hspd < 0 ? sign = -1 : sign = sign;\n      while (!this.physicsCollision(this.x + sign, this.y, this)) {\n        this.x += sign;\n      }\n    }\n\n    this.hspd = 0;\n\n    if (!this.physicsCollision(this.x, this.y + this.vspd, this)) {\n      this.y += this.vspd;\n    } else {\n      let sign = 1;\n      this.vspd < 0 ? sign = -1 : sign = sign;\n      while (!this.physicsCollision(this.x, this.y + sign, this)) {\n        this.y += sign;\n      }\n\n\n      this.vspd = 0;\n    }\n  }\n\n\n\n\n  positionMeeting(x = this.x, y = this.y, obj){\n    if ((x + this.xLen > obj.x && x < obj.x + obj.xLen) &&\n      (y + this.yLen > obj.y && y < obj.y + obj.yLen)\n    ) {\n      return true;\n    } // end of if\n    return false;\n  }\n}\n\nexport default GameEntity;","import Display from \"./display.js\"\n\n\nconst display = new Display();\nconst background = new Image();\nconst spriteSheet = new Image();\nbackground.src = \"./images/city_background_night.png\";\nspriteSheet.src = \"./images/industrial.v2.png\";\ndisplay.background = background;\ndisplay.spriteSheet = spriteSheet;\n// console.log(display.spriteSheet);\nbackground.onload = display.render;\n\n// display.render;","import GameEntity from \"./game_entity\";\n\n\n//hook object is the moving grapplehook\nclass Hook extends GameEntity {\n  constructor(options){\n    super(options)\n    this.defaultColor = 'red';\n    this.spd = 20;\n    this.moving = false;\n    this.state = 'ready';\n  }\n\n  //collides with walls and hook points\n\n  update(viewPort){\n    if(this.state === 'moving' || this.state === 'hooked') {\n      if(this.platformCollision(this.x + this.hspd, this.y + this.vspd, this)){\n        this.state = 'hooked';\n      }\n      else{\n        // console.log('move me')\n        this.x += this.hspd;\n        this.y += this.vspd;\n      }\n      this.draw(viewPort)\n      //bug where while hooked, rehooking will immediatley spin in new pos\n    }\n  }  \n\n  updateTarget(target, from){\n    this.angle = Math.atan2(target.y - from.y, target.x - from.x);\n    // console.log(\"angle is: \", -this.angle * (180 / Math.PI));\n    this.x = from.x;\n    this.y = from.y;\n    this.hspd = this.spd * Math.cos(this.angle);\n    this.vspd = this.spd * Math.sin(this.angle);\n    // this.moving = true;\n    this.state = 'moving';\n  }\n}\nexport default Hook;\n\n//if hook is off screen by x amount, reset\n//review angles and speed","import GameEntitiy from \"./game_entity.js\";\n\nclass Platform extends GameEntitiy {\n  constructor(options){\n    super(options);\n  }\n\n\n}\n\nexport default Platform;","import GameEntity from \"./game_entity.js\";\nimport Hook from \"./hook.js\";\n\nconst PLAYER_KEYS = ['a', 'd', 's', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', ' ', '1', '2'];\n// const PLAYER_KEYS = ['a', 'd', ' '];\n\nclass Player extends GameEntity {\n  constructor(options){\n    super(options);\n    this.image = options.image;\n    this.addEntity = options.addEntity;\n    // this.deleteEntity = options.deleteEntity;\n    this.hook = options.hook;\n    this.moveSpd = 3;\n    this.jumpSpd = 6;\n    this.game = options.game;\n    this.platformCollision = options.platformCollision;\n    this.viewPort = options.viewPort;\n    this.hook = options.hook;\n    this.debug = false;\n    this.swingNext = {x: this.x, y: this.y};\n    this.rotateSpd = 0.05;\n\n    //state 0 = not-swinging, state 1 = swinging\n    this.ropeLength = 0;\n    this.state = 0;\n    this.spinDir = -1;\n\n\n\n    this.takeInput = this.takeInput.bind(this);\n    this.keyBind();\n  }\n\n  keyBind() {\n    this.playerInput = {\n      a: false,\n      d: false,\n      ArrowLeft: false,\n      ArrowRight: false, \n      ArrowUp: false, \n      ArrowDown: false,\n      ' ': false,\n      canJump: true,\n      canInvert: true,\n      mouseDown: false,\n      targetPoint: {x: this.x, y: this.y},\n      mousePos: {x: 0, y: 0}\n    };\n\n    const canvas = document.getElementById('game-canvas');\n\n    //key press\n    document.addEventListener('keydown', (event) => {\n      const keyName = event.key;\n      if(PLAYER_KEYS.includes(event.key)){\n        this.playerInput[event.key] = true;\n      }\n    });\n    // key release\n    document.addEventListener('keyup', (event) => {\n      if (PLAYER_KEYS.includes(event.key)) {\n        this.playerInput[event.key] = false;\n      }\n    });\n\n    canvas.addEventListener('mousedown', (event) => {\n      this.playerInput.targetPoint.x = event.clientX - canvas.offsetLeft + this.viewPort.x;\n      this.playerInput.targetPoint.y = event.clientY - canvas.offsetTop + this.viewPort.y;\n      // console.log(targetPoint, {x: this.x, y: this.y});\n      this.playerInput.mouseDown = true;\n\n      this.hook.updateTarget(this.playerInput.targetPoint, {x: this.x, y: this.y});\n\n    })\n    canvas.addEventListener('mouseup', (event) => {\n      this.playerInput.mouseDown = false;\n    })\n\n    canvas.addEventListener('mousemove', (event) => {\n      this.playerInput.mousePos.x = event.clientX - canvas.offsetLeft + this.viewPort.x;\n      this.playerInput.mousePos.y = event.clientY - canvas.offsetTop + this.viewPort.y;\n    })\n\n  }// end of keybind\n\n  draw(viewPort){\n    if(this.hook.state === 'moving' || this.hook.state === 'hooked'){\n      // this.ropeLength = Math.sqrt(Math.pow(Math.abs(this.x - this.hook.x), 2) + Math.pow(Math.abs(this.y - this.hook.y), 2));\n      this.context.beginPath();\n      this.context.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n\n      //view for dynamic viewport (centers on player)\n      this.context.moveTo(this.x + this.xLen / 2 - (viewPort.x), this.y + this.yLen / 2 - (viewPort.y));\n      this.context.lineTo(this.hook.x + this.hook.xLen / 2 - (viewPort.x), this.hook.y + this.yLen / 2 - (viewPort.y));\n\n      //view for static viewport\n      // this.context.moveTo(this.x + this.xLen / 2, this.y + this.yLen / 2);\n      // this.context.lineTo(this.hook.x + this.hook.xLen / 2, this.hook.y + this.yLen / 2);\n\n\n      this.context.stroke();\n\n      //draws ring around targetpoint (swing path)\n      // this.context.beginPath();\n      // this.context.strokeStyle = 'rgba(255, 255, 255, 0.5)';\n      // this.context.arc(this.hook.x - viewPort.x, this.hook.y - viewPort.y, this.ropeLength, 0, 2 * Math.PI);\n      // this.context.stroke();\n      //bug with radial path expanding / decreasing \n    }\n\n    //draw default player\n    // this.context.fillStyle = 'blue';\n    // this.context.fillRect(this.x - viewPort.x, this.y - viewPort.y, 25, 25);\n    // void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n\n    //Draw sprite\n    if(this.vspd !== 0){\n      this.context.drawImage(this.image, 0, 273, 14, 16, this.x - viewPort.x, this.y - viewPort.y, 30, 30);\n    }\n    else{\n      this.context.drawImage(this.image, 0, 256, 14, 16, this.x - viewPort.x, this.y - viewPort.y, 30, 30);\n    }\n\n  }\n\n  //takeinput more of applying input action\n  takeInput(viewPort){\n    switch(this.state){\n      case 0: \n      //free move state\n        if (this.playerInput.a) {     \n            this.hspd = -this.moveSpd;\n        }\n        if (this.playerInput.d) {\n            this.hspd = this.moveSpd;\n        }\n\n      break;\n\n      case 1:\n      //swing state\n      break;\n    }\n\n    if(this.playerInput[' ']){\n     if(this.playerInput.canJump || this.state === 1){\n       this.vspd = this.jumpSpd * -this.game.gravDir;\n       this.playerInput.canJump = false;\n     }\n     if(this.state === 1){\n        this.hook.state = 'ready'\n        this.hook.x = this.x;\n        this.hook.y = this.y;\n        this.state = 0;\n     }\n    }\n    //GravShift Code\n    // if(this.playerInput.ArrowUp && this.playerInput.canInvert) {\n    //   this.game.gravDir = this.game.gravDir * -1;\n    //   this.playerInput.canInvert = false;\n    // }\n    \n    //Debug tool\n    if(this.playerInput['1']){\n      this.debug = true;\n    }\n    if(this.playerInput['2']){\n      this.debug = false;\n    }\n  }\n\n  update(viewPort){\n    if(this.debug){\n      console.log('X: ', this.playerInput.mousePos.x, 'Y: ', this.playerInput.mousePos.y)\n    }\n    this.takeInput();\n    //check for swing state\n    if(this.hook.state === 'hooked'){\n      if(this.state !== 1){\n        if (this.x > this.hook.x) {\n          this.spinDir = 1;\n        } else this.spinDir = -1;      \n        this.state = 1;\n      }\n  }\n\n\n    switch(this.state){\n      case 0: \n        this.stepCollisionCheck();\n        break;\n\n\n      case 1: //swing state\n       //og swing code\n      //  let targetCenter = this.playerInput.targetPoint;\n        let targetCenter = {x: this.hook.x, y: this.hook.y};\n        this.ropeAngle = Math.atan2(targetCenter.y - this.y, targetCenter.x - this.x) * 180 / Math.PI;\n        if(this.ropeAngle < 0){\n          this.ropeAngle = 360 + this.ropeAngle;\n        }\n        //credit to the math-man i never could be:\n        //https://math.stackexchange.com/questions/103202/calculating-the-position-of-a-point-along-an-arc\n        this.swingNext.x = (targetCenter.x + (this.x - targetCenter.x) * Math.cos(this.rotateSpd) + (targetCenter.y - this.y) * Math.sin(this.rotateSpd));\n        this.swingNext.y = (targetCenter.y + (this.y - targetCenter.y) * Math.cos(this.rotateSpd) + (this.x - targetCenter.x) * Math.sin(this.rotateSpd));\n        this.hspd = this.spinDir * (this.swingNext.x - this.x);\n        this.vspd = this.spinDir * (this.swingNext.y - this.y);\n\n\n\n        this.stepCollisionCheck();\n        break;\n\n    }\n\n    // this.stepPhysicsCollisionCheck();\n    \n    //reset jump limit\n    if (this.platformCollision(this.x, this.y + (1 * this.game.gravDir), this) || this.physicsCollision(this.x, this.y + (1 * this.game.gravDir), this)) {\n      this.playerInput.canJump = true;\n      this.playerInput.canInvert = true;\n    }\n\n    this.draw(viewPort);\n  }\n  \n\n  swingStep(){\n\n  }\n\n\n}\n\n\nexport default Player;","class UIEntitiy {\n  constructor(options) {\n    this.x = options.x;\n    this.y = options.y;\n    this.xLen = options.xLen;\n    this.yLen = options.yLen;\n    this.canvas = document.getElementById('game-canvas');\n    this.defaultColor = options.color || 'yellow'\n    // this.active = options.active\n\n    this.context = options.context;\n\n    this.draw = this.draw.bind(this);\n  }\n\n  draw(viewPort) {\n    //check if sprite, else draw default color box\n    this.context.fillStyle = this.defaultColor;\n    this.context.fillRect(this.x, this.y, this.xLen, this.yLen);\n  }\n\n  update(viewPort) {\n    this.draw(viewPort);\n  }\n\n\n  \n\n  positionMeeting(x, y, obj) {\n    if ((x + this.xLen > obj.x && x < obj.x + obj.xLen) &&\n      (y + this.yLen > obj.y && y < obj.y + obj.yLen)\n    ) {\n      return true;\n    } // end of if\n    return false;\n  }\n}\n\nexport default UIEntitiy;"],"sourceRoot":""}