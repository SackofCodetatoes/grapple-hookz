{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./javascript/display.js","webpack:///./javascript/game.js","webpack:///./javascript/game_entity.js","webpack:///./javascript/grapplehook.js","webpack:///./javascript/hook.js","webpack:///./javascript/hook_point.js","webpack:///./javascript/platform.js","webpack:///./javascript/player.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,aAAa,mBAAO,CAAC,uCAAW;AAChC,eAAe,mBAAO,CAAC,2CAAa;AACpC,mBAAmB,mBAAO,CAAC,qDAAkB;AAC7C;;AAEA;AACA;AACA,qB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,WAAW;AAC5B;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA,O;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,wE;AACA,iG;AACA,W;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA;;AAEA,kDAAkD;AAClD;AACA;AACA,KAAK;AACL;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,W;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,sBAAsB;AAC1C;AACA;AACA,oBAAoB,oCAAoC;AACxD;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,6C;;;;;;;;;;;ACxSA,eAAe,mBAAO,CAAC,2CAAa;AACpC,mBAAmB,mBAAO,CAAC,qDAAkB;AAC7C,iBAAiB,mBAAO,CAAC,+CAAe;AACxC,aAAa,mBAAO,CAAC,uCAAW;AAChC,kBAAkB,mBAAO,CAAC,mDAAiB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,6B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;;AAEA,gD;AACA,iD;AACA,iD;AACA,iD;AACA,iD;AACA,iD;AACA,iD;AACA,iD;AACA,iD;AACA,kD;AACA,kD;AACA,kD;AACA,kD;AACA,kD;AACA,kD;AACA,kD;AACA,kD;AACA,kD;;;;;AAKA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sBAAsB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,CAAC;;AAED,sB;;;;;;;;;;;AC5LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4B;;;;;;;;;;;ACxBA,gBAAgB,mBAAO,CAAC,6CAAc;AACtC,aAAa,mBAAO,CAAC,uCAAW;;;;AAIhC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChBA,mBAAmB,mBAAO,CAAC,qDAAkB;;AAE7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,6B;;;;;;;;;;;ACnBA,mBAAmB,mBAAO,CAAC,qDAAkB;;AAE7C;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,I;;AAEA;AACA,2B;;;;;;;;;;;AC1DA,mBAAmB,mBAAO,CAAC,kDAAe;;AAE1C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0B;;;;;;;;;;;ACvBA,mBAAmB,mBAAO,CAAC,qDAAkB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,SAAS,gCAAgC;AAC5E;;AAEA;AACA;AACA,S;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;AAMA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./javascript/grapplehook.js\");\n","const Game = require(\"./game.js\");\r\nconst Player = require(\"./player.js\");\r\nconst GameEntity = require(\"./game_entity.js\");\r\nconst PLAYER_KEYS = ['w', 'a', 's', 'd', 'f'];\r\n\r\nclass Display {\r\n  constructor(game){\r\n    this.game = game;  \r\n    this.game = this.game  \r\n    this.playerInput = {\r\n      a: false,\r\n      d: false,\r\n      w: false,\r\n      s: false,\r\n      ' ': false,\r\n      canJump: 'true',\r\n      mousePos: {x: 0, y: 0},\r\n      shootHook: false,\r\n      hookTarget: {},\r\n    }\r\n    this.keyBind();\r\n    this.render = this.render.bind(this);\r\n    this.getInput = this.getInput.bind(this);\r\n    this.applyPhysics = this.applyPhysics.bind(this);\r\n  }\r\n  //source of inspiration for omni-directional movement/fluidity\r\n  //https://stackoverflow.com/questions/12273451/how-to-fix-delay-in-javascript-keydown\r\n  keyBind() {\r\n    let timer;\r\n    document.addEventListener('keydown', (event) => {\r\n      const keyName = event.key;\r\n      if (PLAYER_KEYS.includes(event.key)) {\r\n        this.playerInput[event.key] = true;\r\n      }\r\n    });\r\n    document.addEventListener('keyup', (event) => {\r\n      if (PLAYER_KEYS.includes(event.key)) {\r\n        this.playerInput[event.key] = false;\r\n      }\r\n    });\r\n    document.addEventListener('keydown', (event) => {\r\n      if(event.key === ' ' && this.playerInput.canJump === true){\r\n        this.playerInput.canJump = false;\r\n        this.game.entities.newPlayer.vspd = -4;\r\n      }\r\n    })\r\n    this.game.canvas.addEventListener('mousemove', (event) => {\r\n      this.playerInput.mousePos.x = event.clientX - this.game.canvas.offsetLeft;\r\n      this.playerInput.mousePos.y = event.clientY - this.game.canvas.offsetTop;\r\n    })\r\n    this.game.canvas.addEventListener('mousedown', (event) => {\r\n      let player = this.game.entities.newPlayer;\r\n      this.playerInput.shootHook = true;\r\n      this.playerInput.hookTarget = {x: event.clientX - this.game.canvas.offsetLeft, y: event.clientY - this.game.canvas.offsetTop};\r\n      this.game.entities.hookPoint.x = player.x + player.x_len / 2;\r\n      this.game.entities.hookPoint.y = player.y + player.y_len / 2;\r\n      this.game.entities.hookPoint.target = this.playerInput.hookTarget;\r\n      this.game.entities.hookPoint.active = true;\r\n      this.game.entities.hookPoint['fired'] = true;\r\n      this.game.entities.hookPoint.calcSpd();\r\n    })\r\n    document.addEventListener('mouseup', (event) => {\r\n      this.hookOff();\r\n    })\r\n  }\r\n  hookOff(){\r\n    let player = this.game.entities.newPlayer;\r\n    this.playerInput['shootHook'] = false;\r\n    this.game.entities.hookPoint.active = false;\r\n    this.game.entities.hookPoint.reset(player.x + player.x_len / 2, player.y + player.y_len / 2);\r\n    this.game.entities.newPlayer.state = 'move';\r\n    this.game.entities.hookPoint['fired'] = false;\r\n \r\n  }\r\n\r\n  getInput() {\r\n    let player = this.game.entities.newPlayer;\r\n    let next;\r\n    if (this.playerInput['a'] === true) {\r\n      this.game.entities.newPlayer.faceDir = -1;\r\n      next = {\r\n        x: player.x - player.moveSpd,\r\n      }\r\n      if(this.game.collisionCheck(Object.assign({}, player, next))){\r\n        while (!this.game.collisionCheck(player)){\r\n          this.game.entities.newPlayer.x -= 1;\r\n        }\r\n        this.game.entities.newPlayer.x += 1;\r\n      } \r\n      else \r\n        // this.game.entities.newPlayer.hspd = -this.game.entities.newPlayer.moveSpd;\r\n        this.game.entities.newPlayer.x -= this.game.entities.newPlayer.moveSpd;\r\n    } else if(this.playerInput['a'] === false){\r\n      this.game.entities.newPlayer.hspd = 0;\r\n    }\r\n\r\n    if (this.playerInput['d'] === true) {\r\n      this.game.entities.newPlayer.faceDir = 1;\r\n      next = {\r\n        x: player.x + player.moveSpd,\r\n      }\r\n      if (this.game.collisionCheck(Object.assign({}, player, next))) {\r\n        while (!this.game.collisionCheck(player)) {\r\n          this.game.entities.newPlayer.x += 1;\r\n        }\r\n        this.game.entities.newPlayer.x -= 1;\r\n      }\r\n      else this.game.entities.newPlayer.hspd = this.game.entities.newPlayer.moveSpd;\r\n    } else if(this.playerInput['d'] === false){\r\n      this.game.entities.newPlayer.hspd = 0;\r\n    }\r\n//for debuggerin\r\n    if (this.playerInput['w'] === true) {\r\n      this.game.entities.newPlayer.y -= 10;\r\n      next = {\r\n        y: player.y - player.moveSpd\r\n      }\r\n      if (this.game.collisionCheck(Object.assign({}, player, next))) {\r\n        while (!this.game.collisionCheck(player)) {\r\n          this.game.entities.newPlayer.y -= 1;\r\n        }\r\n        this.game.entities.newPlayer.y+=1;\r\n      }\r\n      else this.game.entities.newPlayer.y -= this.game.entities.newPlayer.moveSpd;\r\n    }\r\n\r\n\r\n    if(this.playerInput.shootHook === true){\r\n      let hookPoint = this.game.entities.hookPoint;\r\n      let hook = this.game.entities.hook;\r\n      let newPlayer = this.game.entities.newPlayer;\r\n      \r\n      this.game.entities.hook.targetX = hookPoint.x + hookPoint.x_len/2;\r\n      this.game.entities.hook.targetY = hookPoint.y + hookPoint.y_len/2;\r\n      \r\n      let checkLen = Math.sqrt((Math.pow(Math.abs(hook.x - hookPoint.x), 2) + Math.pow(Math.abs(hook.y - hookPoint.y), 2)));\r\n      \r\n      if(checkLen > 500){\r\n        this.hookOff();\r\n      }\r\n      \r\n      if(this.game.collisionCheck(this.game.entities.hookPoint)){\r\n        //on collide\r\n        this.game.entities.newPlayer.targetPoint = this.playerInput.hookTarget;\r\n        if(!this.game.entities.hookPoint.collided){\r\n          this.playerInput['ropeLen'] = \r\n          Math.sqrt((Math.pow(Math.abs(hook.x - hookPoint.x), 2) + Math.pow(Math.abs(hook.y - hookPoint.y), 2)));\r\n          this.game.entities.newPlayer.ropeLen = this.playerInput.ropeLen;\r\n\r\n          if (this.playerInput.ropeLen > 100) {\r\n            // console.log('exceed max capacity');\r\n          }\r\n\r\n          if(newPlayer.x < newPlayer.targetPoint.x) {\r\n            // console.log('spds', newPlayer.hspd, newPlayer.vspd);\r\n            // newPlayer.rotateSpd = Math.abs(newPlayer.rotateSpd) * -1; \r\n            newPlayer.rotateSpd = (Math.abs(newPlayer.hspd) + Math.abs(newPlayer.vspd))/150 * -1; \r\n          } \r\n          else {\r\n            // newPlayer.rotateSpd = Math.abs(newPlayer.rotateSpd);\r\n            newPlayer.rotateSpd = (Math.abs(newPlayer.hspd) + Math.abs(newPlayer.vspd)) / 150;\r\n          }\r\n        }\r\n        // console.log('collsion chek', this.playerInput.ropeLen)\r\n        this.game.entities.hookPoint.collided = true;\r\n        this.game.entities.newPlayer.state = 'swing';\r\n        this.game.context.beginPath();\r\n        this.game.context.strokeStyle = 'white';\r\n        this.game.context.arc(hookPoint.x, hookPoint.y,\r\n        this.playerInput.ropeLen, 0, 2 * Math.PI);\r\n        this.game.context.stroke();\r\n        // console.log(this.game.entities.newPlayer.hspd, this.game.entities.newPlayer.vspd)\r\n      }\r\n      //set hsnapshopt\r\n      this.game.entities.hook.draw();\r\n    }\r\n\r\n  }\r\n\r\n  applyPhysics(obj){\r\n    let nextStep = obj;\r\n    let checkStep = Object.assign({}, obj);\r\n    checkStep.y = checkStep.y + checkStep.vspd + 1;\r\n\r\n    if(obj.vspd < 8){\r\n      obj.vspd += 0.2;\r\n    }\r\n\r\n    if (!this.game.collisionCheck(Object.assign({}, obj, checkStep))) {\r\n      nextStep.y += nextStep.vspd;\r\n      //fall\r\n    } else {\r\n      obj.vspd = 0;\r\n      this.playerInput.canJump = true;\r\n      if (this.game.collisionCheck(Object.assign({}, obj, nextStep))) {\r\n        // console.log('ahh im stuck');\r\n        while (!this.game.collisionCheck(obj)) {\r\n          this.game.entities.newPlayer.y += 2;\r\n        }\r\n        // console.log(this.game.collisionCheck(obj))\r\n        this.game.entities.newPlayer.y -= 2;\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n  newGame(){\r\n    // this.game.constructor();\r\n    this.game.init();\r\n    this.render();\r\n    // console.log(this)\r\n  }\r\n\r\n\r\n  render(){  \r\n    const canvas = this.game.canvas;\r\n\r\n    const context = this.game.context;\r\n    let newPlayer = this.game.entities.newPlayer;\r\n    let staticEntity = this.game.entities.staticEntity;\r\n    let move_dir = this.game.entities.move_dir;\r\n    let entities = this.game.entities;\r\n    let getInput = this.getInput;\r\n    let mousePos = this.playerInput.mousePos;\r\n    let platforms = this.game.platforms;\r\n    let applyPhysics = this.applyPhysics;\r\n    let shootHook = this.playerInput.shootHook;\r\n    let hookTarget = this.playerInput.hookTarget;\r\n    let hook = this.game.entities.hook;\r\n    let hookPoint = this.game.entities.hookPoint;\r\n    let ropeLen = this.playerInput.ropeLen;\r\n    let newGame = this.newGame.bind(this);\r\n    let game = this.game;\r\n    let imageX = 0;\r\n    // debugger\r\n    \r\n    let run = setInterval(function () {\r\n      if(newPlayer.y > 700){\r\n        // alert('git outa here');\r\n        newGame();\r\n        clearInterval(run);\r\n      }\r\n      context.clearRect(0, 0, canvas.attributes.width.value, canvas.attributes.height.value);\r\n      context.beginPath();\r\n      context.strokeStyle = 'red';\r\n      context.arc(mousePos.x, mousePos.y, 10, 0, 2* Math.PI);\r\n      context.stroke();\r\n\r\n      \r\n      // plain background\r\n      // context.fillStyle = 'gray'; //background \r\n      // context.fillRect(0, 0, canvas.attributes.width.value, canvas.attributes.height.value);\r\n      \r\n      //city background\r\n      // debugger\r\n      imageX += 0.5;\r\n      context.drawImage(game.background, imageX, 300, 4192, 1024, 0, 0, 4192, 1024);\r\n      \r\n\r\n      getInput();\r\n      // if(!hookPoint.collided){\r\n\r\n        applyPhysics(newPlayer);\r\n      // }\r\n\r\n      newPlayer.move();\r\n      \r\n      hook.x = newPlayer.x + newPlayer.x_len/2;\r\n      hook.y = newPlayer.y + newPlayer.y_len/2;\r\n      if(!hookPoint.active){\r\n        hookPoint.x = newPlayer.x + newPlayer.x_len / 2;\r\n        hookPoint.y = newPlayer.y + newPlayer.y_len / 2;\r\n      }\r\n      hookPoint.move();\r\n\r\n      for(let i = 0; i < platforms.length; i++){\r\n        platforms[i].move();\r\n      }\r\n      for(let i = 0; i < Object.values(entities).length; i++){\r\n        if(Object.values(entities)[i].active){\r\n          requestAnimationFrame(Object.values(entities)[i].draw);\r\n        }\r\n      }\r\n\r\n    }, 1000 / 60);\r\n  }\r\n}\r\n\r\nmodule.exports = Display;\r\n\r\n      //Test Purposes\r\n      // if (entities.staticEntity.y > 200) {\r\n      //   move_dir = -2;\r\n      // } else if (entities.staticEntity.y < 100) {\r\n      //   move_dir = 2;\r\n      // }\r\n      // entities.staticEntity.y += move_dir;","const Player = require(\"./player.js\");\r\nconst GameEntity = require(\"./game_entity.js\");\r\nconst Platform = require(\"./platform.js\");\r\nconst Hook = require(\"./hook.js\");\r\nconst HookPoint = require(\"./hook_point.js\");\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.entities = {};\r\n    this.canvas = document.getElementById('game-canvas');\r\n    this.context = this.canvas.getContext('2d');\r\n    this.platforms = [];\r\n    this.spriteSheet;\r\n    // this.spriteSheet.onload = draw;\r\n  }\r\n  init() {\r\n    //testing purposes\r\n    // debugger\r\n    this.platforms = [];\r\n    const playerOptions = {\r\n      x: 25,\r\n      y: 25,\r\n      context: this.context,\r\n      color: 'blue',\r\n      x_len: 25,\r\n      y_len: 25,\r\n      game: this,\r\n      image: this.spriteSheet,\r\n    };\r\n    const staticOptions = {\r\n      x: 0,\r\n      y: 0,\r\n      context: this.context,\r\n      color: 'red',\r\n      x_len: 40,\r\n      y_len: 40,\r\n      context: this.context,\r\n    };\r\n    const platformOptions = {\r\n      x: 0,\r\n      y: 600,\r\n      color: 'black',\r\n      context: this.context,\r\n      x_len: 640,\r\n      y_len: 100,\r\n      image: this.spriteSheet,\r\n    }\r\n    const platformOptions2 = {\r\n      x: 320,\r\n      y: 250,\r\n      color: 'black',\r\n      context: this.context,\r\n      x_len: 100,\r\n      y_len: 50,\r\n      image: this.spriteSheet,\r\n    }\r\n    const platformOptions3 = {\r\n      x: 400,\r\n      y: 0,\r\n      color: 'black',\r\n      context: this.context,\r\n      x_len: 20,\r\n      y_len: 400,\r\n      image: this.spriteSheet,\r\n    }\r\n    const grappleHookOptions = {\r\n      x: playerOptions.x,\r\n      y: playerOptions.y,\r\n      color: 'black',\r\n      context: this.context,\r\n      x_len: 0,\r\n      y_len: 0,\r\n    }\r\n    const hookPointOptions = {\r\n      x: playerOptions.x + playerOptions.x_len/2,\r\n      y: playerOptions.y + playerOptions.y_len/2,\r\n      color: 'yellow',\r\n      context: this.context,\r\n      x_len: 10,\r\n      y_len: 10,\r\n    }\r\n\r\n\r\n    // this.move_dir = 1;\r\n    this.entities['platform'] = new Platform(platformOptions);\r\n    platformOptions2.y = 550; \r\n    this.entities['platform2'] = new Platform(platformOptions2);\r\n    platformOptions2.y = 250;\r\n\r\n    this.entities['platform3'] = new Platform(platformOptions3);\r\n    platformOptions.x = 800;\r\n    this.entities['platform4'] = new Platform(platformOptions);\r\n    \r\n    platformOptions2.x = 800;\r\n    this.entities['platform5'] = new Platform(platformOptions2);\r\n    platformOptions2.x = 1200;\r\n    this.entities['platform6'] = new Platform(platformOptions2);\r\n    platformOptions2.x = 1600;\r\n    this.entities['platform7'] = new Platform(platformOptions2);\r\n    platformOptions2.x = 2000;\r\n    this.entities['platform8'] = new Platform(platformOptions2);\r\n    platformOptions2.x = 2400;\r\n    this.entities['platform9'] = new Platform(platformOptions2)\r\n    platformOptions.x = 2500;\r\n    this.entities['platform10'] = new Platform(platformOptions);\r\n    platformOptions3.x = 2700;\r\n    this.entities['platform11'] = new Platform(platformOptions3);\r\n    platformOptions2.x = 2900;\r\n    this.entities['platform12'] = new Platform(platformOptions2);\r\n    platformOptions3.x = 3200;\r\n    this.entities['platform13'] = new Platform(platformOptions2);\r\n\r\n    this.entities['platform14'] = new Platform(platformOptions2);\r\n    this.entities['platform15'] = new Platform(platformOptions2);\r\n    this.entities['platform16'] = new Platform(platformOptions2);\r\n    this.entities['platform17'] = new Platform(platformOptions2);\r\n    this.entities['platform18'] = new Platform(platformOptions2);\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // this.entities['staticEntity'] = new GameEntity(staticOptions);\r\n    this.entities['newPlayer'] = new Player(playerOptions);\r\n    this.entities['hook'] = new Hook(grappleHookOptions);\r\n    this.entities['hookPoint'] = new HookPoint(hookPointOptions);\r\n    \r\n    this.platforms.push(this.entities.platform); \r\n    this.platforms.push(this.entities.platform2); \r\n    this.platforms.push(this.entities.platform3); \r\n    this.platforms.push(this.entities.platform4); \r\n    this.platforms.push(this.entities.platform5); \r\n    this.platforms.push(this.entities.platform6); \r\n    this.platforms.push(this.entities.platform7); \r\n    this.platforms.push(this.entities.platform8); \r\n    this.platforms.push(this.entities.platform9); \r\n    this.platforms.push(this.entities.platform10); \r\n    this.platforms.push(this.entities.platform11); \r\n    this.platforms.push(this.entities.platform12); \r\n    this.platforms.push(this.entities.platform13); \r\n    this.platforms.push(this.entities.platform14); \r\n    this.platforms.push(this.entities.platform15); \r\n    this.platforms.push(this.entities.platform16); \r\n    this.platforms.push(this.entities.platform17); \r\n    this.platforms.push(this.entities.platform18); \r\n\r\n\r\n\r\n\r\n    this.entities.newPlayer.collisionCheck = this.collisionCheck;\r\n    // this.entities['camera'] = {prevX: this.entities.newPlayer.x}\r\n  }\r\n  gravStep(obj){\r\n    obj.vspd += 2;\r\n    return obj;\r\n  }\r\n  xCollisionCheck(obj){\r\n      let platforms = this.platforms;\r\n      for (let i = 0; i < platforms.length; i++) {\r\n        if (\r\n          (\r\n            (obj.x + obj.x_len > platforms[i].x && obj.x < platforms[i].x + platforms[i].x_len) &&\r\n            (obj.y + obj.y_len > platforms[i].y && obj.y < platforms[i].y + platforms[i].y_len))\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n  }\r\n  collisionCheck(obj) {\r\n    // debugger\r\n    let platforms = this.platforms;\r\n    for(let i = 0; i < platforms.length; i++){\r\n      if( \r\n        (\r\n          (obj.x + obj.x_len > platforms[i].x && obj.x < platforms[i].x + platforms[i].x_len) &&\r\n          (obj.y + obj.y_len > platforms[i].y && obj.y < platforms[i].y + platforms[i].y_len))\r\n        ) {\r\n          return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n} //end of scope\r\n\r\nmodule.exports = Game;","class GameEntity {\r\n  constructor(options){\r\n    this.x = options.x;\r\n    this.y = options.y;\r\n    this.context = options.context;\r\n    this.color = options.color;\r\n    this.x_len = options.x_len;\r\n    this.y_len = options.y_len;\r\n    this.draw = this.draw.bind(this);\r\n    this.hspd = 0;\r\n    this.vspd = 0;\r\n    this.active = true;\r\n    this.faceDir = 1;\r\n  }\r\n  draw() {\r\n    this.context.fillStyle = this.color;\r\n    this.context.fillRect(this.x, this.y, this.x_len, this.y_len);\r\n  }\r\n\r\n  move() {\r\n    this.x += this.hspd;\r\n    this.y += this.vspd;\r\n  }\r\n}\r\nmodule.exports = GameEntity;","const Display = require(\"./display.js\");\r\nconst Game = require(\"./game.js\");\r\n\r\n\r\n\r\n// console.log('all is dandy!');\r\nlet spriteSheet = new Image();\r\nspriteSheet.src = \"./images/industrial.v2.png\";\r\n\r\nlet background = new Image();\r\nbackground.src = \"./images/city_background_night.png\";\r\nconst game = new Game();\r\ngame.spriteSheet = spriteSheet;\r\ngame.background = background;\r\ngame.init();\r\nconst testDisplay = new Display(game);\r\nbackground.onload = testDisplay.render;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","const GameEntity = require(\"./game_entity.js\");\r\n\r\nclass GrappleHook extends GameEntity {\r\n  constructor(options){\r\n    super(options);\r\n    this.active = false;\r\n  }\r\n\r\n  draw(){\r\n    this.context.strokeStyle = 'lightgray';\r\n    this.context.beginPath();\r\n    this.context.moveTo(this.x, this.y);\r\n    this.context.lineTo(this.targetX, this.targetY);\r\n    this.context.stroke();\r\n  }\r\n  snapshot(){\r\n    return {x: this.x, y: this.y}\r\n  }\r\n}\r\nmodule.exports = GrappleHook;","const GameEntity = require(\"./game_entity.js\");\r\n\r\nclass HookPoint extends GameEntity {\r\n  constructor(options){\r\n    super(options);\r\n    this.active = false;\r\n    this.moveSpd = 40;\r\n    this.target = {x: 0, y: 0};\r\n    this.collided = false;\r\n    this.snapCalc = false;\r\n  }\r\n  draw() {\r\n    this.context.fillStyle = 'yellow';\r\n    this.context.fillRect(this.x, this.y, 10, 10);\r\n    // this.context.restore();\r\n  }\r\n  reset(x, y){\r\n    this.x = x;\r\n    this.y = y;\r\n    this.hspd = 0;\r\n    this.vspd = 0;\r\n    this.collided = false;\r\n  }\r\n  calcSpd(){\r\n    // https: //gist.github.com/conorbuck/2606166\r\n    let angle = Math.atan2(this.target.y - this.y, this.target.x - this.x);\r\n    // console.log('heres an angle', angle);\r\n    this.hspd = this.moveSpd * Math.cos(angle);\r\n    this.vspd = this.moveSpd * Math.sin(angle);\r\n    // debugger\r\n\r\n  }\r\n  move(){\r\n    if(this.active){\r\n     if(!this.collided){\r\n       this.x += this.hspd;\r\n       this.y += this.vspd;\r\n      }\r\n      else if(this.collided){\r\n        this.x -= 1;\r\n      }\r\n    }\r\n\r\n    //  else {\r\n\r\n    //   // debugger\r\n    //   console.log('spds', this.hspd, this.vspd)\r\n    //   this.x += this.hspd;\r\n    //   this.y += this.vspd;\r\n    //  }\r\n  //      this.hspd = 0;\r\n  //      this.vspd = 0;\r\n  //    }\r\n  //  }\r\n\r\n   } \r\n  \r\n}\r\nmodule.exports = HookPoint;","const GameEntity = require(\"./game_entity\");\r\n\r\nclass Platform extends GameEntity {\r\n  constructor(options){\r\n    super(options);\r\n    this.color = 'darkgray';\r\n    this.image = options.image;\r\n\r\n  }\r\n  draw(){\r\n    // if(this.y_len > this.x_len){\r\n      // this.context.drawImage(this.image, 214, 128, 14, 81, this.x, this.y, 14, 81);\r\n    // } else {\r\n      this.context.fillStyle = this.color;\r\n      this.context.fillRect(this.x, this.y, this.x_len, this.y_len);\r\n    // }\r\n  }\r\n\r\n  move(){\r\n    this.x -= 1;\r\n  }\r\n  \r\n}\r\nmodule.exports = Platform;","const GameEntity = require(\"./game_entity.js\")\r\n\r\nconst MOVE_STATES = ['move', 'fixed']\r\n// const KEY_LEFT = (event.key === 'a');\r\nclass Player extends GameEntity {\r\n  constructor(options) {\r\n    super(options);\r\n    this.moveSpd = 4;\r\n    this.state = 'move';\r\n    this.ropeLen = 0;\r\n    this.ropeAngle;\r\n    this.targetPoint = {}\r\n    this.rotateSpd = .05;\r\n    this.collsionCheck;\r\n    this.game = options.game;\r\n    this.image = options.image;\r\n    // debugger\r\n  }\r\n  \r\n  move(){\r\n    // console.log('spds', this.hspd, this.vspd)\r\n    if(this.collided === true){\r\n      // console.log('set!');\r\n    }\r\n    switch (this.state) {\r\n      case 'move':\r\n        this.x += this.hspd;\r\n        this.y += this.vspd;\r\n        // this.rotateSpd = 0.6;\r\n        break;\r\n\r\n\r\n      case 'swing':\r\n        let center = this.targetPoint;\r\n        this.ropeAngle = Math.atan2(this.targetPoint.y - this.y, this.targetPoint.x - this.x) * 180 / Math.PI;\r\n        if(this.y + this.vspd > this.ropeLen){\r\n          while(!this.y > this.ropeLen ){\r\n            this.y+=1;\r\n          }\r\n        }\r\n        //to the mathman i never could be:\r\n        //https://math.stackexchange.com/questions/103202/calculating-the-position-of-a-point-along-an-arc\r\n        let nextX = (center.x + (this.x - center.x) * Math.cos(this.rotateSpd) + (center.y - this.y) * Math.sin(this.rotateSpd));\r\n        let nextY = (center.y + (this.y - center.y) * Math.cos(this.rotateSpd) + (this.x - center.x) * Math.sin(this.rotateSpd));\r\n        // debugger\r\n        this.hspd = nextX - this.x;\r\n        this.vspd = nextY - this.y;\r\n        if(nextY < this.y && this.vspd > -4){\r\n          this.vspd -= 1;\r\n        }\r\n        let test = Object.assign({}, this, {x: this.x, y: this.y+ this.vspd});\r\n        if(!this.game.collisionCheck(test)){\r\n          \r\n          this.y += this.vspd;\r\n          this.x += this.hspd;\r\n        } \r\n        else {\r\n          //add bounce\r\n          this.rotateSpd = this.rotateSpd * -0.51;\r\n        }\r\n        \r\n        \r\n        // console.log('x and y spd', this.hspd, this.vspd );\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    // console.log('avg spds', this.hspd, this.vspd)\r\n  }\r\n    draw(){\r\n      let count = 0;\r\n      let x;\r\n      let y;\r\n      // if(this.faceDir === -1){\r\n      //   this.context.scale(-1,1);\r\n      // }\r\n      // else {\r\n      //   this.context.scale(1,1);\r\n      // }\r\n    \r\n      // this.context.scale(-1, 1);\r\n\r\n      this.context.drawImage(this.image, 0, 257, 14, 16, this.x, this.y, 30, 28);\r\n      \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = Player;\r\n"],"sourceRoot":""}